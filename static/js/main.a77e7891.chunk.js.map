{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["games","App","lis","map","el","i","key","useState","selected","setSelected","className","id","type","placeholder","disabled","value","onClick","min","max","length","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0KAEMA,EAAQ,CACZ,sDACA,+CACA,qCACA,2BACA,0CACA,6CAEA,wCACA,0DAGA,qEACA,0CACA,2BACA,oDACA,uCACA,sDACA,kDACA,+BACA,yCACA,uCACA,yCACA,wCACA,gDACA,+CACA,0CAiDaC,MA1Cf,WACE,IAAMC,EAAMF,EAAMG,KAAI,SAACC,EAAIC,GAAL,OACpB,wBAAIC,IAAKD,GAAID,MAFD,EAIkBG,mBAAS,MAJ3B,mBAIPC,EAJO,KAIGC,EAJH,KAQd,OACE,yBAAKC,UAAU,aACb,oEACA,2BACE,2BAAOA,UAAU,eAAeC,GAAG,aAAaC,KAAK,OAAOC,YAAY,mCAAmCC,UAAQ,EACjHC,MAAOP,GAAY,MAGvB,uBAAGE,UAAU,eACX,4BAAQC,GAAG,gBAAgBD,UAAU,kBAAkBM,QAZ9C,WATjB,IAAkBC,EAAKC,EAUnBT,EAAYT,GAVEiB,EAUY,EAVPC,EAUUlB,EAAMmB,OAAS,EATvCC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,IAAMA,OAoB/C,kBAEF,2BACE,qEACA,4BACE,qGACA,sLAEA,uJAEA,uQAKJ,2BACE,8CACA,wBAAIN,GAAG,iBACJT,MC1DSqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a77e7891.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst games = [\n  'Street Fighter II: The World Warrior (Capcom, 1991)',\n  'Super Street Fighter II Turbo (Capcom, 1994)',\n  'Marvel Super Heroes (Capcom, 1995)',\n  'Red Earth (Capcom, 1996)',\n  'X-Men vs. Street Fighter (Capcom, 1996)',\n  'Super Gem Fighter: Mini Mix (Capcom, 1997)',\n  // \"Rival Schools: United by Fate\",\n  'Street Fighter Alpha 3 (Capcom, 1998)',\n  'Marvel vs. Capcom: Clash of Super Heroes (Capcom, 1998)',\n  // \"Plasma Sword: Nightmare of Bilstein (Capcom, 1998)\",\n  // \"Street Fighter EX2 Plus (Capcom, 1999)\",\n  'Street Fighter III 3rd Strike: Fight for the Future (Capcom, 1999)',\n  \"JoJo's Bizarre Adventure (Capcom, 1999)\",\n  'Fatal Fury 2 (SNK, 1992)',\n  'Samurai Shodown III / Samurai Spirits (SNK, 1995)',\n  \"The King of Fighters '94 (SNK, 1994)\",\n  \"The King of Fighters '98 - The Slugfest (SNK, 1998)\",\n  'Kizuna Encounter - Super Tag Battle (SNK, 1996)',\n  'The Last Blade 2 (SNK, 1998)',\n  'Garou - Mark of the Wolves (SNK, 1999)',\n  'Rage of the Dragons (Playmore, 2002)',\n  'SNK vs. Capcom - SVC Chaos (SNK, 2003)',\n  'The King of Fighters 2003 (SNK, 2003)',\n  'Far East of Eden: Kabuki Klash (Hudson, 1995)',\n  'Asura Buster: Eternal Warriors (Fuuki, 2000)',\n  'Matrimelee (Noise Factory/Atlus, 2002)'\n]\n\nfunction randInt (min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nfunction App () {\n  const lis = games.map((el, i) => (\n    <li key={i}>{el}</li>\n  ))\n  const [selected, setSelected] = useState(null)\n  const choose = () => {\n    setSelected(games[randInt(0, games.length - 1)])\n  }\n  return (\n    <div className=\"container\">\n      <h1>The Capcom/SNK Fighting Game Chooser</h1>\n      <p>\n        <input className=\"form-control\" id=\"game-input\" type=\"text\" placeholder='Click the \"Choose a game\" button' disabled\n          value={selected || ''}\n        />\n      </p>\n      <p className=\"text-center\">\n        <button id=\"choose-button\" className=\"btn btn-primary\" onClick={choose}>Choose a game</button>\n      </p>\n      <p>\n        <h4>Random Fighting Game Tournament Rules</h4>\n        <ul>\n          <li>The match is over when either player wins 2 games (2 games out of 3).</li>\n          <li>Each game is played by randomly choosing a new fighting game using the chooser above. It is\n            recommended to use MAME to play with these fighting games.</li>\n          <li>A game should use the default number of rounds defined in the chosen fighting game (usually\n            2 winning rounds out of 3).</li>\n          <li>After the fighting game was selected, any player may choose to discard that fighting\n            game. When this event occurs, the players simply use the random chooser a second\n            time. Each player can only discard one fighting game per match.</li>\n        </ul>\n      </p>\n      <p>\n        <h4>Possible games</h4>\n        <ul id=\"possibilities\">\n          {lis}\n        </ul>\n      </p>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}